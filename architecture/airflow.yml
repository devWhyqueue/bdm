# Common environment variables used across all Airflow services
x-airflow-environment: &airflow-common-env
  AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  AIRFLOW__WEBSERVER__SECRET_KEY: "your-secret-key"
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
  AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
  AIRFLOW__CORE__FERNET_KEY: ''
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
  AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
  AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  _PIP_ADDITIONAL_REQUIREMENTS: apache-airflow-providers-apache-kafka apache-airflow-providers-amazon apache-airflow-providers-docker
  # Connections
  AIRFLOW_CONN_KAFKA_DEFAULT: 'kafka://kafka:9092'
  AIRFLOW_CONN_S3: 'aws://minioadmin:minioadmin@?host=http%3A%2F%2Fminio%3A9000'
  AIRFLOW_CONN_REDDIT_API: ${AIRFLOW_CONN_REDDIT_API}
  # Variables
  AIRFLOW_VAR_FINNHUB_API_KEY: ${FINNHUB_API_KEY}

# Health check for the webserver
x-airflow-webserver-healthcheck: &airflow-webserver-healthcheck
  test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 30s

# Health check for the scheduler
x-airflow-scheduler-healthcheck: &airflow-scheduler-healthcheck
  test: [ "CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\"" ]
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 30s

# A base definition to be extended by all Airflow services
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.5}
  user: "50000:0"
  environment:
    <<: *airflow-common-env
  volumes:
    - ../bdm/airflow/dags:/opt/airflow/dags
    - ./.airflow/logs:/opt/airflow/logs
    - ./.airflow/config:/opt/airflow/config
    - ./.airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
    - /tmp:/tmp

services:
  # Database initialization
  airflow-init-db:
    <<: *airflow-common
    user: "0:0"
    entrypoint: /bin/bash
    command: >
      -c "
      mkdir -p /sources/logs /sources/dags /sources/plugins &&
      chown -R \"50000:0\" /sources/{logs,dags,plugins} &&
      exec /entrypoint airflow db init
      "
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    volumes:
      - ./.airflow:/sources

  airflow-init-packages:
    <<: *airflow-common
    entrypoint: /entrypoint
    command: airflow version
    depends_on:
      airflow-init-db:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    healthcheck:
      <<: *airflow-scheduler-healthcheck
    depends_on:
      airflow-init-db:
        condition: service_completed_successfully

  # Airflow Celery Worker
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    depends_on:
      airflow-init-db:
        condition: service_completed_successfully

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    restart: always
    healthcheck:
      <<: *airflow-webserver-healthcheck
    depends_on:
      airflow-init-db:
        condition: service_completed_successfully
      airflow-scheduler:
        condition: service_started
    environment:
      <<: *airflow-common-env
      AIRFLOW__WEBSERVER__BASE_URL: "http://localhost/airflow"
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: True
