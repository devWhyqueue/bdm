# Common dependencies for Airflow containers
x-airflow-common-depends-on: &airflow-common-depends-on
  redis:
    condition: service_healthy
  postgres:
    condition: service_healthy
  minio:
    condition: service_healthy

# Common dependencies for the "init" services
x-airflow-init-depends-on: &airflow-init-depends-on
  postgres:
    condition: service_healthy
  minio:
    condition: service_healthy
  kafka:
    condition: service_healthy

services:

  # ----------------------------------------------------------------------
  # Database services
  # ----------------------------------------------------------------------
  postgres:
    extends:
      file: ./architecture/database.yml
      service: postgres
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data

  redis:
    extends:
      file: ./architecture/database.yml
      service: redis

  # ----------------------------------------------------------------------
  # Airflow services
  # ----------------------------------------------------------------------
  airflow-webserver:
    extends:
      file: architecture/airflow.yml
      service: airflow-webserver
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init-db:
        condition: service_completed_successfully
      airflow-init-packages:
        condition: service_completed_successfully

  airflow-scheduler:
    extends:
      file: architecture/airflow.yml
      service: airflow-scheduler
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init-db:
        condition: service_completed_successfully
      airflow-init-packages:
        condition: service_completed_successfully

  airflow-init-db:
    extends:
      file: architecture/airflow.yml
      service: airflow-init-db
    depends_on:
      <<: *airflow-init-depends-on

  airflow-init-packages:
    extends:
      file: architecture/airflow.yml
      service: airflow-init-packages
    depends_on:
      <<: *airflow-init-depends-on

  airflow-worker:
    extends:
      file: architecture/airflow.yml
      service: airflow-worker
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init-db:
        condition: service_completed_successfully
      airflow-init-packages:
        condition: service_completed_successfully

  # ----------------------------------------------------------------------
  # Airflow task build services
  # ----------------------------------------------------------------------

  finazon_stream_ingestion:
    image: finazon_stream
    build:
      context: ./bdm/ingestion/streaming/finazon
      dockerfile: Dockerfile
    container_name: finazon_stream_ingestion
    command: [ "python", "websocket_client.py", "--price-ticks-topic", "${FINAZON_PRICE_TICKS_TOPIC}", "--volume-stream-topic", "${FINAZON_VOLUME_STREAM_TOPIC}", "--tickers", "BTC/USDT", "--dataset", "crypto" ]
    environment:
      - KAFKA_ENDPOINT=${KAFKA_ENDPOINT}
      - FINAZON_API_KEY=${FINAZON_API_KEY}
    depends_on:
      - kafka
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  reddit_bitcoin:
    image: subreddit-scraper
    build:
      context: .
      dockerfile: bdm/ingestion/batch/reddit/Dockerfile
    container_name: reddit_bitcoin_scraper
    command: [ "python", "subreddit_scraper.py", "--help" ]

  finnhub_bitcoin_news:
    image: finnhub-news-scraper
    build:
      context: .
      dockerfile: bdm/ingestion/batch/finnhub/Dockerfile
    container_name: finnhub_bitcoin_news_scraper
    command: [ "python", "news_scraper.py", "--help" ]

  # ----------------------------------------------------------------------
  # Kafka services
  # ----------------------------------------------------------------------
  kafka:
    extends:
      file: ./architecture/kafka.yml
      service: kafka

  kafka-ui:
    extends:
      file: ./architecture/kafka.yml
      service: kafka-ui
    depends_on:
      - kafka

  # ----------------------------------------------------------------------
  # MinIO services
  # ----------------------------------------------------------------------
  minio:
    extends:
      file: ./architecture/minio.yml
      service: minio
    volumes:
      - minio-data:/data

  createbuckets:
    extends:
      file: ./architecture/minio.yml
      service: createbuckets
    depends_on:
      - minio

  # ----------------------------------------------------------------------
  # Flink services
  # ----------------------------------------------------------------------
  jobmanager:
    extends:
      file: ./architecture/flink.yml
      service: jobmanager
    depends_on:
      - kafka
      - minio

  taskmanager:
    extends:
      file: ./architecture/flink.yml
      service: taskmanager
    depends_on:
      - jobmanager
      - kafka
      - minio

  bitcoin-aggregator:
    build:
      context: bdm/processing/streaming/bitcoin_aggregator
      dockerfile: Dockerfile
    container_name: bitcoin-aggregator
    environment:
      - KAFKA_ENDPOINT=kafka:9092
      - KAFKA_TOPIC=${FINAZON_VOLUME_STREAM_TOPIC}
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=landing-zone
    depends_on:
      - jobmanager
      - taskmanager
      - kafka
      - minio
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  # finazon-stream-pipeline-processor:
  #   build:
  #     context: bdm/processing/streaming/finazon_stream_pipeline_processor
  #     dockerfile: Dockerfile
  #   container_name: finazon-stream-pipeline-processor
  #   environment:
  #     - PRICE_TICKS_TOPIC=${FINAZON_PRICE_TICKS_TOPIC}
  #     - VOLUME_STREAM_TOPIC=${FINAZON_VOLUME_STREAM_TOPIC}
  #     - KAFKA_ENDPOINT=${KAFKA_ENDPOINT}
  #     - INFLUXDB_PORT=8086
  #   depends_on:
  #     - jobmanager
  #     - taskmanager
  #     - kafka
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /etc/timezone:/etc/timezone:ro

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./architecture/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - airflow-webserver
      - kafka-ui
      - jobmanager

volumes:
  postgres-db-volume:
  minio-data:
  flink-checkpoints:
  flink-usrlib: